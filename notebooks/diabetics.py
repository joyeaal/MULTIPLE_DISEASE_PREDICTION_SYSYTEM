# -*- coding: utf-8 -*-
"""Diabetics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-t0E2ql-HyjNSshO6pZuYxZsfyYsrGtV

Importing the libraries
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""Data collection and analysis

Diabetes Dataset
"""

# Load the dataset to a pandas dataframe
diabetes_dataset = pd.read_csv('/content/diabetes.csv')

# printing the first 5 rows of the datset
diabetes_dataset.head()

# printing the last 5 rows of the dataset
diabetes_dataset.tail()

# printing no of rows and columns in the dataset
diabetes_dataset.shape

# Statistical measures of the dataset
diabetes_dataset.describe()

diabetes_dataset['Outcome'].value_counts()

"""1 ----> Diabetcs

0 ----> No Diabetes
"""

diabetes_dataset.groupby('Outcome').mean()

"""Separating datas and labels"""

X = diabetes_dataset.drop(columns = 'Outcome', axis=1)
Y = diabetes_dataset['Outcome']

print(X)

print(Y)

"""Train and test Data"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""Training the Model"""

classifier = svm.SVC(kernel='linear')

# training the svm classifier
classifier.fit(X_train, Y_train)

"""Model Evaluation


Finding Accuracy Score
"""

# accuracy score on the training data
X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy Score Of Training Data : ', training_data_accuracy)

# accuracy score on the test data
X_test_prediction = classifier.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy Score Of Testing Data : ', test_data_accuracy)

"""Building a Model"""

input_data = (4,110,92,0,0,37.6,0.191,30)

# change the input data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshape the data for one instances
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = classifier.predict(input_data_reshaped)
print(prediction)

if(prediction[0]==0):
  print("Person has No Diabetes !!!")
else:
  print("Person has Diabetes !!!")

"""Saving the Trained Model"""

import pickle

filename = 'diabetes_model.sav'
pickle.dump(classifier, open(filename ,'wb'))

# loading the saved model
loaded_model = pickle.load(open('diabetes_model.sav', 'rb'))

input_data = (4,110,92,0,0,37.6,0.191,30)

# change the input data to a numpy array
input_data_as_numpy_array = np.array(input_data)

# reshape the data for one instances
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = classifier.predict(input_data_reshaped)
print(prediction)

if(prediction[0]==0):
  print("Person has No Diabetes !!!")
else:
  print("Person has Diabetes !!!")

